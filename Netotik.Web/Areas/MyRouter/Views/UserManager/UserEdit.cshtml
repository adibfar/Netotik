@model Netotik.ViewModels.Identity.UserClient.UserEditModel
@{
    ViewBag.Title = Captions.EditUser;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<section class="flexbox-container">
    <div class="row">
        <div class="col-md-12">
            @using (Html.BeginForm(MVC.MyRouter.UserManager.ActionNames.UserEdit_Save, MVC.MyRouter.UserManager.Name, FormMethod.Post,
                                                                    htmlAttributes: new { @class = "form cmxform form-horizontal tasi-form", enctype = "multipart/form-data", id = "form" }))
            {
                @Html.AntiForgeryToken()
                <div class="card">
                    <div class="card-header">
                        <button name="actionType" value="@Netotik.Common.Controller.ActionType.Save" class="btn btn-social width-150 btn-instagram margin-bottom-2" onclick="AjaxForm.Post(this, 'form')" data-loading-text="در حال ارسال اطلاعات">
                            <span class="icon-checkmark2 font-medium-4"></span>
                            @Netotik.Resources.Captions.Save
                        </button>
                        <a value="@Captions.Reset" class="btn btn-social btn-instagram width-150 margin-bottom-2" href="#" onclick="UserResetCounter('@Model.id','@Model.username');">
                            <span class="icon-refresh font-medium-4"></span>
                            @Captions.Reset
                        </a>
                        @if (false)
                        {
                            <a value="@Captions.PrintReport" class="btn btn-social btn-instagram width-150 margin-bottom-2" href="#">
                                <span class="icon-printer2 font-medium-4"></span>
                                @Captions.PrintReport
                            </a>
                            <a value="@Captions.MakeCard" class="btn btn-social btn-instagram width-150 margin-bottom-2" href="#">
                                <span class="icon-card font-medium-4"></span>
                                @Captions.MakeCard
                            </a>
                        }

                        <a value="@Captions.Remove" class="btn btn-social btn-instagram width-150 margin-bottom-2" href="#" onclick="Userremove('@Model.id');">
                            <span class="icon-remove font-medium-4"></span>
                            @Captions.Remove
                        </a>
                        @if (Model.disabled == "false")
                        {
                            <a onclick="Userdisable('@Model.id');" class="btn btn-social btn-instagram width-150 margin-bottom-2" value="@Captions.Disabled" href="#">
                                <span class="icon-eye-blocked font-medium-4"></span> @Captions.Disable
                            </a>
                        }
                        else
                        {
                            <a href="#" onclick="Userenable('@Model.id');" class="btn btn-social btn-instagram width-150 margin-bottom-2" value="@Captions.Enabled">
                                <span class="icon-eye font-medium-4"></span> @Captions.Enable
                            </a>
                        }
                      
                        <a href="@Url.Action(MVC.MyRouter.UserManager.UserList())" class="btn btn-social width-150 btn-secondary btn-default  margin-bottom-2"><span class="icon-android-arrow-back font-medium-3"></span> @Captions.Back </a>
                        <div class="row">
                            <div class="col-md-12">
                                @Html.ValidationSummary(false, "", htmlAttributes: new { @class = "text-danger" })
                                <span class="text-danger">@Captions.JustEnglish</span>
                            </div>
                        </div>
                    </div>
                    @Html.HiddenFor(model => model.id)
                    <div class="card-body">
                        <div class="card-block">
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group has-feedback has-icon-left">
                                        @Html.LabelFor(m => m.username)
                                        <div class="position-relative has-icon-left">
                                            @Html.TextBoxFor(m => m.username, new { @class = "form-control" })
                                            <div class="form-control-position">
                                                <i class="icon-user-tie"></i>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.username, "", htmlAttributes: new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group has-feedback has-icon-left">
                                        @Html.LabelFor(m => m.password)
                                        <div class="position-relative has-icon-left">
                                            @Html.TextBoxFor(m => m.password, new { @class = "form-control" })
                                            <div class="form-control-position">
                                                <i class="icon-key2"></i>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.password, "", htmlAttributes: new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <label class="font-noraml">@Captions.SelectPlan</label>
                                    <select id="profile" name="profile" data-placeholder="@Captions.SelectPlan" class="selectize-select" style="min-width:350px;" tabindex="2">
                                        <option value="@Model.profile">@Model.profile</option>
                                        @foreach (var item in ViewBag.profiles)
                                        {
                                            if (item.name != Model.profile)
                                            {
                                            <option value="@item.name">@item.name</option>
                                            }
                                        }
                                    </select>
                                </div>


                            </div>
                            <br />
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group has-feedback has-icon-left">
                                        @Html.LabelFor(m => m.first_name)
                                        <div class="position-relative has-icon-left">
                                            @Html.TextBoxFor(m => m.first_name, new { @class = "form-control" })
                                            <div class="form-control-position">
                                                <i class="icon-head"></i>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.first_name, "", htmlAttributes: new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group has-feedback has-icon-left">
                                        @Html.LabelFor(m => m.last_name)
                                        <div class="position-relative has-icon-left">
                                            @Html.TextBoxFor(m => m.last_name, new { @class = "form-control" })
                                            <div class="form-control-position">
                                                <i class="icon-user"></i>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.last_name, "", htmlAttributes: new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group has-feedback has-icon-left">
                                        @Html.LabelFor(m => m.NationalCode)
                                        <div class="position-relative has-icon-left">
                                            @Html.TextBoxFor(m => m.NationalCode, new { @class = "form-control" })
                                            <div class="form-control-position">
                                                <i class="icon-comments"></i>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.NationalCode, "", htmlAttributes: new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                            </div>

                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group has-feedback has-icon-left">
                                        @Html.LabelFor(m => m.phone)
                                        <div class="position-relative has-icon-left">
                                            @Html.TextBoxFor(m => m.phone, new { @class = "form-control" })
                                            <div class="form-control-position">
                                                <i class="icon-phone"></i>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.phone, "", htmlAttributes: new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group has-feedback has-icon-left">
                                        @Html.LabelFor(m => m.email)
                                        <div class="position-relative has-icon-left">
                                            @Html.TextBoxFor(m => m.email, new { @class = "form-control" })
                                            <div class="form-control-position">
                                                <i class="icon-email"></i>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.email, "", htmlAttributes: new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group has-feedback has-icon-left">
                                        @Html.LabelFor(m => m.location)
                                        <div class="position-relative has-icon-left">
                                            @Html.TextBoxFor(m => m.location, new { @class = "form-control" })
                                            <div class="form-control-position">
                                                <i class="icon-location"></i>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.location, "", htmlAttributes: new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group has-feedback has-icon-left">
                                        @Html.LabelFor(m => m.Birthday)
                                        <div class="position-relative has-icon-left">
                                            @Html.TextBoxFor(m => m.Birthday, new { @class = "form-control" })
                                            <div class="form-control-position">
                                                <i class="icon-comments"></i>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.Birthday, "", htmlAttributes: new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group has-feedback has-icon-left">
                                        @Html.LabelFor(m => m.MarriageDate)
                                        <div class="position-relative has-icon-left">
                                            @Html.TextBoxFor(m => m.MarriageDate, new { @class = "form-control" })
                                            <div class="form-control-position">
                                                <i class="icon-comments"></i>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.MarriageDate, "", htmlAttributes: new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group has-feedback has-icon-left">
                                        @Html.LabelFor(m => m.Age)
                                        <div class="position-relative has-icon-left">
                                            @Html.TextBoxFor(m => m.Age, new { @class = "form-control" })
                                            <div class="form-control-position">
                                                <i class="icon-comments"></i>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.Age, "", htmlAttributes: new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group has-feedback has-icon-left">
                                        <label class="font-noraml">@Captions.IsMale</label>
                                        <select id="IsMale" name="IsMale" data-placeholder="@Captions.IsMale" class="selectize-select" style="min-width:350px;" tabindex="2">
                                            <option value="true">مذکر</option>
                                            <option value="false">مونث</option>
                                        </select>
                                        @Html.ValidationMessageFor(model => model.IsMale, "", htmlAttributes: new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>


@section DownScript{
    <script type="text/javascript">


        function Userremove(id) {
            PostData("@Url.Action(MVC.MyRouter.UserManager.Userremove())", { id: id });
        }

        function Userdisable(id) {
            PostData("@Url.Action(MVC.MyRouter.UserManager.Userdisable())", { id: id });
        }

        function Userenable(id) {
            PostData("@Url.Action(MVC.MyRouter.UserManager.Userenable())", { id: id });
        }

        function UserResetCounter(id, name) {
            PostData("@Url.Action(MVC.MyRouter.UserManager.ResetCounter())", { id: id, user: name });
        }

        function UserCloseSession(id, name) {
            PostData("@Url.Action(MVC.MyRouter.UserManager.CloseSession())", { id: id, user: name });
        }

    </script>
}