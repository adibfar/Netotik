@using CaptchaMvc.HtmlHelpers
@using Netotik.Common.Helpers
@model Netotik.ViewModels.Identity.Account.ResetPasswordViewModel
@{
    Layout = MVC.Shared.Views._Layout;
}
<section class="flexbox-container">
    <div class="col-md-4 offset-md-4 col-xs-10 offset-xs-1 box-shadow-3 p-0">
        <div class="card border-grey border-lighten-3 m-0">
            <div class="card-body collapse in">
                @if (ViewBag.Message != null)
                {
                    <div class="alert alert-icon-left alert-danger alert-dismissible fade in mb-2" role="alert">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                        <strong>@Captions.MissionFail</strong> @ViewBag.Message
                    </div>
                }
                <div class="card-block">
                    @using (Html.BeginForm(MVC.Account.ActionNames.ResetPassword, MVC.Account.Name, null, FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "loginForm", autocomplete = "off" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(m => m.Code)

                        <div class="form-group has-feedback has-icon-left">
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = Captions.Email })
                            <div class="form-control-position">
                                <i class="icon-head"></i>
                            </div>
                            @Html.ValidationMessageFor(model => model.Email, "", htmlAttributes: new { @class = "text-danger" })
                        </div>
                        <div class="form-group has-feedback has-icon-left">
                            @Html.PasswordFor(m => m.Password, new { @class = "form-control", placeholder = Captions.Password })
                            <div class="form-control-position">
                                <i class="icon-key3"></i>
                            </div>
                            @Html.ValidationMessageFor(model => model.Password, "", htmlAttributes: new { @class = "text-danger" })
                        </div>
                        <div class="form-group has-feedback has-icon-left">
                            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", placeholder = Captions.ConfirmPassword })
                            <div class="form-control-position">
                                <i class="icon-key3"></i>
                            </div>
                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", htmlAttributes: new { @class = "text-danger" })
                        </div>
                        <button type="submit" class="btn btn-outline-primary btn-block"><i class="icon-wrench3"></i> @Captions.ChangePassword </button>
                    }
                </div>

            </div>
        </div>

    </div>
</section>
